raw3_num <- apply(raw3_num, 2, function(x) return(x / max(x)))
raw3_num
apply(raw3_num, 2, max)
y <- ifelse(raw3_fac$loan_status == "Charged Off", 1, 0)
table(y)
y
tabel(raw3_fac$loan_status)
table(raw3_fac$loan_status)
110 / 4786
raw3_fac
apply(raw3_fac, 2, function(x) sum(is.na(x)))
X1 <- raw3_num
X2 <- raw3_fac
y <- ifelse(raw3_fac$loan_status == "Charged Off", 1, 0)
charged_ind <- y == 1
paid_ind <- !charged_ind
dim(X1)
dim(X2)
names(raw3_fac)
names(raw3_fac[-10])
X2 <- raw3_fac[-10]
dim(X2)
0.2/0.7
charged_ind
sumcharged_ind
sum(charged_ind)
sum(paid_ind)
110 / 4786
X1 <- raw3_num[charged_ind, ]
X1 <- raw3_num
raw3_num[charged_ind, ]
dim(raw3_num[charged_ind, ])
?smaple
?sample
dim(X1)
sample(1:110, size = 2200, replace = T)
X1[paid_ind, ]
dim(X1[paid_ind, ])
X1 <- raw3_num
X2 <- raw3_fac[-10]
y <- ifelse(raw3_fac$loan_status == "Charged Off", 1, 0)
charged_ind <- y == 1
paid_ind <- !charged_ind
dim(X1[paid_ind, ])
sum(charged_ind)
dim(X1[charged_ind, ])
os_ind <- sample(1:110, size = 2200, replace = T)
X1[charged_ind, ][os_ind, ]
dim(X1[charged_ind, ][os_ind, ])
dim(X1[paid_ind, ])
X_data <- rbind(X1[paid_ind, ], X1[charged_ind, ][os_ind, ])
y_data <- rbind(y[paid_ind, ], y[charged_ind, ][os_ind, ])
y[paid_ind, ] + y[charged_ind, ][os_ind, ]
c(y[paid_ind, ], y[charged_ind, ][os_ind, ])
y[paid_ind, ]
y[paid_ind]
y[charged_ind][os_ind]
y_data <- c(y[paid_ind], y[charged_ind][os_ind])
dim(y_data)
length(y_data)
dim(X_data)
X_data <- rbind(X1[paid_ind, ], X1[charged_ind, ][os_ind, ])
y_data <- c(y[paid_ind], y[charged_ind][os_ind])
dim(X_data)
dim(y_data)
length(y_data)
tmp_ind <- sample(length(y_data))
X_data <- X_data[tmp_ind, ]
y_data <- y[tmp_ind]
dim(X_data)
length(X_data)
length(y_data)
pca_prcomp <- prcomp(X_data, scale. = TRUE)
pcs <- pca_prcomp$x
ev <- pca_prcomp$sdev ** 2
ev_perc <- cumsum(ev) / sum(ev)
ev_perc
pca_prcomp$sdev
X_pc <- pcs[, 1:13]
logitMod <- glm(y_data ~ X_pc, family=binomial(link="logit"))
predicted <- plogis(predict(logitMod, as.data.frame(X_pc)))
sum(ifelse(predicted < 0.1, 0, 1))
sum(ifelse(predicted < 0.1, 0, 1) == y)
sum(ifelse(predicted < 0.1, 0, 1))
sum(ifelse(predicted < 0.1, 0, 1) == y_data)
predicted
sum(ifelse(predicted < 0.1, 0, 1))
dim(X_pc)
length(y_data)
logitMod <- glm(y_data ~ X_pc, family=binomial(link="logit"))
head(X_pc)
predicted <- plogis(predict(logitMod, as.data.frame(X_pc)))
sum(ifelse(predicted < 0.1, 0, 1))
sum(ifelse(predicted < 0.1, 0, 1) == y_data)
ifelse(predicted < 0.1, 0, 1)
ifelse(predicted < 0.1, 0, 1) == y_data
y_data
y[charged_ind][os_ind]
y[paid_ind]
X_data <- rbind(X1[paid_ind, ], X1[charged_ind, ][os_ind, ])
y_data <- c(y[paid_ind], y[charged_ind][os_ind])
pca_prcomp <- prcomp(X_data, scale. = TRUE)
pcs <- pca_prcomp$x
ev <- pca_prcomp$sdev ** 2
ev_perc <- cumsum(ev) / sum(ev)
ev_perc
logitMod <- glm(y_data ~ X_pc, family=binomial(link="logit"))
predicted <- plogis(predict(logitMod, as.data.frame(X_pc)))
sum(ifelse(predicted < 0.1, 0, 1))
# accuracy
sum(ifelse(predicted < 0.1, 0, 1) == y_data)
predicted
length(predicted)
ifelse(predicted < 0.1, 0, 1)
ifelse(predicted < 0.1, 0, 1) == y_data
sum(ifelse(predicted < 0.2, 0, 1) == y_data)
sum(ifelse(predicted < 0.3, 0, 1) == y_data)
plotROC()
sum(ifelse(predicted < 0.4, 0, 1) == y_data)
sum(ifelse(predicted < 0.5, 0, 1) == y_data)
sum(ifelse(predicted < 0.6, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.7, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.8, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.9, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 1, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.5, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.4, 0, 1) == y_data) / length(y_data)
sensitivity(y, predicted, threshold = 0.4)
specificity(y, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.4)
specificity(y_data, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.5)
specificity(y_data, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.6)
specificity(y_data, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.2)
specificity(y_data, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.3)
specificity(y_data, predicted, threshold = 0.4)
sensitivity(y_data, predicted, threshold = 0.3)
specificity(y_data, predicted, threshold = 0.3)
plotROC(y_data, predicted)
sum(ifelse(predicted < 0.5, 0, 1) == y_data) / length(y_data)
# ROC
plotROC(y_data, predicted)
sum(ifelse(predicted < 0.6, 0, 1) == y_data) / length(y_data)
# ROC
plotROC(y_data, predicted)
sum(ifelse(predicted < 0.7, 0, 1) == y_data) / length(y_data)
# ROC
plotROC(y_data, predicted)
sum(ifelse(predicted < 0.7, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.5, 0, 1) == y_data) / length(y_data)
plotROC(y_data, predicted)
dim(X_data
s
dim(X_data)
logitMod1 <- glm(y_data ~ X_data, family=binomial(link="logit"))
predicted1 <- plogis(predict(logitMod1, as.data.frame(X_data)))
plotROC(y_data, predicted1)
sum(ifelse(predicted < 0.5, 0, 1) == y_data) / length(y_data)
sum(ifelse(predicted < 0.6, 0, 1) == y_data) / length(y_data)
predicted1
plotROC(y_data, predicted)
dim(raw)
probabilities
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library("InformationValue")
library(glmnet)
plotROC(test_y, predicted)
dim(os_ind)
length(os_ind)
dim(X_data)
length(test_y)
length(y_data)
test_ind <- sample(1:6986, size = 2000)
train_X <- X_data[-test_ind, ]
test_X <- X_data[test_ind, ]
train_y <- y_data[-test_ind]
test_y <- y_data[test_ind]
cv.lasso <- cv.glmnet(train_X, train_y, alpha = 1, family = "binomial")
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = cv.lasso$lambda.min)
probabilities <- model %>% predict(newx = test_X)
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- (probabilities - min(probabilities)) / (max(probabilities)-min(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
head(test_y)
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
softmax(probabilities)
install.packages("mda")
library("mda", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
softmax(probabilities)
head(probabilities)
probabilities <- 1 / ( 1+exp(-probabilities))
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / sum(exp(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
max(probabilities)
hist(probabilities)
hist(probabilities, breaks = 1000)
hist(probabilities, breaks = 10000)
hist(probabilities, breaks = 100)
hist(probabilities, breaks = 10)
hist(probabilities, breaks = 1)
plot(probabilities, breaks = 1)
plot(sort(probabilities), breaks = 1)
summary(probabilities)
plot(density(probabilities))
sum(probabilities)
probabilities <- model %>% predict(newx = test_X)
plotROC(test_y, probabilities)
probabilities <- (probabilities - min(probabilities)) / (max(probabilities)-min(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- probabilities / sum(probabilities)
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
predicted <- ifelse(probabilities > 0, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
head(predicted)
head(test_y)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- (probabilities - min(probabilities)) / sum(probabilities - min(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- (probabilities - min(probabilities)) / sum(probabilities - min(probabilities))
plotROC(test_y, probabilities)
plotROC(probabilities, test_y)
plotROC(test_y, probabilities)
hist(probabilities)
hist(probabilities, breaks = 10000)
hist(probabilities, breaks = 1000)
hist(probabilities, breaks = 100)
predicted <- ifelse(probabilities > 0.0005, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
hist(probabilities, breaks = 100)
plotROC(1-test_y, probabilities)
plotROC(1-test_y, probabilities)
head(probabilities)
head(test_y)
sum(probabilities)
predicted <- ifelse(probabilities > 0.0005, 1, 0)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.0005, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.0004, 1, 0)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.0004, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.0003, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.00035, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.00036, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
predicted <- ifelse(probabilities > 0.00037, 1, 0)
plotROC(test_y, predicted)
plotROC(test_y, predicted)
plotROC(test_y, probabilities)
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- log(probabilities/(1-probabilities))
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (1 + exp(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
predicted <- ifelse(probabilities > 0.00037, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
hist(probabilities)
hist(probabilities, breaks = 1000)
hist(probabilities, breaks = 100)
hist(probabilities, breaks = 10)
hist(probabilities, breaks = 1)
hist(probabilities, breaks = 2)
hist(probabilities, breaks = 3)
hist(probabilities, breaks = 4)
length(probabilities)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library("InformationValue")
library(glmnet)
plotROC(test_y, probabilities)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
sen <- sensitivity(test_y, predicted, threshold = 0.3)
spe <- specificity(test_y, predicted, threshold = 0.3)
f1 <- 1/((1/spe+1/sen)/2)
f1
predicted <- ifelse(probabilities > 0.00037, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
predicted <- ifelse(probabilities > 0.00038, 1, 0)
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (1 + exp(probabilities))
predicted <- ifelse(probabilities > 0.00037, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
sen <- sensitivity(test_y, predicted, threshold = 0.3)
spe <- specificity(test_y, predicted, threshold = 0.3)
f1 <- 1/((1/spe+1/sen)/2)
f1
plotROC(test_y, probabilities)
?plotROC
hist(probabilities)
plotROC(1-test_y, probabilities)
plotROC(1-test_y, probabilities)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (sum(exp(probabilities)))
plotROC(test_y, probabilities)
head(probabilities)
sum(probabilities)
max(probabilities)
?rnorm
probabilities <- model %>% predict(newx = test_X)
probabilities <- pnorm(probabilities)
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- pnorm(probabilities) / sum(pnorm(probabilities))
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (1+exp(probabilities))
plotROC(test_y, probabilities)
head(probabilities)
cv.lasso <- cv.glmnet(train_X, train_y, alpha = 0, family = "binomial")
model <- glmnet(train_X, train_y, alpha = 0, family = "binomial", lambda = cv.lasso$lambda.min)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (1+exp(probabilities))
plotROC(test_y, probabilities)
hist(probabilities)
cv.lasso <- cv.glmnet(train_X, train_y, alpha = 0.5, family = "binomial")
model <- glmnet(train_X, train_y, alpha = 0.5, family = "binomial", lambda = cv.lasso$lambda.min)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(probabilities) / (1+exp(probabilities))
plotROC(test_y, probabilities)
hist(probabilities)
probabilities <- model %>% predict(newx = test_X)
hist(probabilities)
probabilities <- (probabilities - min(probabilities)) / sum(probabilities - min(probabilities))
hist(probabilities)
plotROC(test_y, probabilities)
plotROC(test_y, probabilities)
head(probabilities)
hist(probabilities)
probabilities <- model %>% predict(newx = test_X)
hist(probabilities)
head(probabilities)
heaf
head(test_y)
cbind(probabilities, test_y)
probabilities <- exp(0.1*probabilities) / (1+exp(0.1*probabilities))
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.2*probabilities) / (1+exp(0.2*probabilities))
plotROC(test_y, probabilities)
a<- c(0,0,0,1,1,1,0,1,1,0,0,0,0,1,1)
b<- c(.8, .8, 0, 1,1,.6, .4, .8, 0, 0, .2, 0, 0, 1,1)
c<- c(.928,.576, .008, .944, .832, .816, .136, .584, .032, .016, .28, .024, 0, .984, .952)
plotROC(a, b)
plotROC(a, c)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.001*probabilities) / (1+exp(0.001*probabilities))
plotROC(test_y, probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(2*probabilities) / (1+exp(2*probabilities))
plotROC(test_y, probabilities)
head(probabilities)
hist(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(-probabilities) / (1+exp(-probabilities))
plotROC(test_y, probabilities)
hist(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
cbind(test_y, probabilities)
cv.lasso$lambda.min
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library("InformationValue")
library(glmnet)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 1)
probabilities <- model %>% predict(newx = test_X)
head(prob)
head(probabilities)
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.0001)
probabilities <- model %>% predict(newx = test_X)
head(probabilities)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.001)
head(probabilities)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
hist(probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.01)
probabilities <- model %>% predict(newx = test_X)
head(probabilities)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.1)
probabilities <- model %>% predict(newx = test_X)
head(probabilities)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.5)
probabilities <- model %>% predict(newx = test_X)
head(probabilities)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.2)
probabilities <- model %>% predict(newx = test_X)
head(probabilities)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.15)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.1)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.12)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.13)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.127)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.121)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.122)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.125)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.124)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.123)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.12)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.121)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.123)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
model <- glmnet(train_X, train_y, alpha = 1, family = "binomial", lambda = 0.12)
probabilities <- model %>% predict(newx = test_X)
probabilities <- exp(0.01*probabilities) / (1+exp(0.01*probabilities))
plotROC(test_y, probabilities)
hist(probabilities)
hist(probabilities, breaks = 100)
predicted <- ifelse(probabilities > 0.5, 1, 0)
# accuracy
sum(ifelse(predicted < 0.4, 0, 1) == test_y) / length(test_y)
sen <- sensitivity(test_y, predicted, threshold = 0.3)
spe <- specificity(test_y, predicted, threshold = 0.3)
f1 <- 1/((1/spe+1/sen)/2)
f1
plotROC(test_y, probabilities)
0.88-027
0.88-0.27
0.61/0.27
(0.88-0.7)/0.7
